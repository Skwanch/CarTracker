/*******************	Kevin Wang	Project 3	Car Tracker*******************/import java.io.*;import java.util.*;public class CarTracker{	private static int count = 0;     private static HashMap<String,Integer> car_map = new HashMap<String,Integer>(); 	//maps VIN to queue index		private static PriorityQueue p_queue = new PriorityQueue(100); 						//price queue	private static PriorityQueue m_queue = new PriorityQueue(100); 						//mileage queue		public static void main(String[] args) throws Exception	{				BufferedReader car_file = new BufferedReader (new FileReader ("cars.txt"));		String[] data_arr = new String[6];		car_file.readLine();		String car_data = car_file.readLine();		while (car_data != null)		{			//Loads data from .txt file into price queue, mileage queue and VIN hashmap			data_arr = car_data.split(":");			Car car = new Car();			car.setVin(data_arr[0]);			car.setMake(data_arr[1]);			car.setModel(data_arr[2]);			car.setPrice(Double.parseDouble(data_arr[3]));			car.setMileage(Integer.parseInt(data_arr[4]));			car.setColor(data_arr[5]);						count++;			p_queue.insertP(count,car);			m_queue.insertM(count,car);			car_map.put(car.getVin(),count);			car_data = car_file.readLine();		}				Scanner kb = new Scanner(System.in);		boolean exit = false;		while(!exit)		{			System.out.println("\t1: Add a car");			System.out.println("\t2: Update a car");			System.out.println("\t3: Remove a specific car from consideration");			System.out.println("\t4: Retrieve the lowest price car");			System.out.println("\t5: Retrieve the lowest mileage car");			System.out.println("\t6: Retrieve the lowest price car by make and model");			System.out.println("\t7: Retrieve the lowest mileage car by make and model");			System.out.println("\t8: Exit program");			System.out.print("\nPlease enter an int to make your selection: ");						switch(kb.next())			{				case "1":					addCar();					break;				case "2":					updateCar();					break;				case "3":					removeCar();					break;				case "4":					retrieveCar(4);					break;				case "5":					retrieveCar(5);					break;				case "6":					retrieveCar(6);					break;				case "7":										retrieveCar(7);					break;				case "8": 					exit = true;					break;				default:					System.out.println("\nERROR: Invalid input\n");					break;			}		}		System.out.println("\nGOODBYE");	}		public static void addCar() //Prompts user for data and adds info to queues and hashmap	{		Scanner kb = new Scanner(System.in);		Car car = new Car();		System.out.print("\nEnter the VIN number: ");		car.setVin(kb.next());		System.out.print("Enter the make: ");		car.setMake(kb.next());		System.out.print("Enter the model: ");		car.setModel(kb.next());		System.out.print("Enter the price: ");		car.setPrice(kb.nextDouble());		System.out.print("Enter the mileage: ");		car.setMileage(kb.nextInt());		System.out.print("Enter the color: ");		car.setColor(kb.next());				count++;		p_queue.insertP(count,car);		m_queue.insertM(count,car);		car_map.put(car.getVin(),count);				System.out.println("\nAddition successful");		System.out.println("Returning to menu...\n");	}		public static void updateCar() //Updates aspects of car depending on user's selection, changes queues as necessary	{		System.out.print("Enter VIN of the car: ");		Scanner kb = new Scanner(System.in);		String input = kb.next();		if(!car_map.containsKey(input))		{			System.out.println("ERROR: VIN not in system");			return;		}				int i = car_map.get(input);		Car car;		boolean exit = false;		while(!exit)		{			System.out.println("\t1. Update Price");			System.out.println("\t2. Update Mileage");			System.out.println("\t3. Update Color");			System.out.println("\t4. Return to main menu");			System.out.print("Please enter an int corresponding to an update selection: "); 			switch(kb.next())			{				case "1":					System.out.print("\nEnter the new price: ");					car = p_queue.carOf(i);					car.setPrice(kb.nextDouble());					p_queue.changeCarP(i, car);					System.out.println("Update successful");					exit = true;					break;				case "2":					System.out.print("Enter the new mileage: ");					car = m_queue.carOf(i);					car.setMileage(kb.nextInt());					m_queue.changeCarM(i, car);					System.out.println("Update successful");					exit = true;					break;				case "3":					System.out.print("Enter the new color: ");					car = m_queue.carOf(i);					car.setColor(kb.next());					p_queue.changeCarP(i, car);					m_queue.changeCarM(i, car);					System.out.println("Update successful");					exit = true;					break;				case "4":					exit = true;					break;				default:					System.out.println("\nERROR: Invalid input\n");					break;			}		}		System.out.println("Returning to menu...\n");	}		public static void removeCar() //Removes car when VIN is provided, updates queues as necessary	{		System.out.print("Enter VIN: ");		Scanner kb = new Scanner(System.in);		String input = kb.next();		if(!car_map.containsKey(input)){			System.out.println("ERROR: VIN not in system");			return;		}		p_queue.deleteP(car_map.get(input));		m_queue.deleteM(car_map.get(input));		count--;		System.out.println("\nRemoval successful");		System.out.println("Returning to menu...\n");	}		public static void retrieveCar(int selection) //Utilizes queues to return a recommended car based on user input make and model	{		Scanner kb = new Scanner(System.in);		String make = null;		String model = null;		Car match;		switch(selection)		{			case 4:				match = p_queue.minCar();				match.display();				break;			case 5:				match = m_queue.minCar();				match.display();				break;			case 6:				System.out.print("\nEnter the make: ");				make = kb.next();				System.out.print("Enter the model: ");				model = kb.next();				match = p_queue.findMinP(make, model);					match.display();				break;			case 7:				System.out.print("\nEnter the make: ");				make = kb.next();				System.out.print("Enter the model: ");				model = kb.next();				match = m_queue.findMinM(make, model);				match.display();				break;		}		System.out.println("Returning to menu...\n");	}}